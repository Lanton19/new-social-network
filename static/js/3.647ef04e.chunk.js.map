{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Posts/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Posts/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileInfo","profile","className","s","descriptionBlock","src","photos","large","fullName","aboutMe","Preloader","Post","item","message","likeCount","maxLength10","maxLengthCreator","AddNewPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","name","component","Textarea","placeholder","validate","required","MyPosts","React","memo","postsElements","posts","reverse","map","p","createRef","postsBlock","values","addPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.647ef04e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2Qv-3\",\"imgFirst\":\"ProfileInfo_imgFirst__1gQvC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__20utm\",\"posts\":\"MyPosts_posts__1n-ft\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3kyEw\"};","import React, { useState, useEffect } from 'react';\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false); // useState возвращает массив, первый элемент записываем в \r\n    //editMode, второй в setEditMode(ф-я которую меняет первый элемент)\r\n    let [status, setStatus] = useState(props.status); // локальный state \r\n\r\n    useEffect( ()=>{                 // после отрисовки компонента. синхронизация состояния\r\n        setStatus(props.status);\r\n    }, [props.status] );              // если изменился props.status - запусти useEffect\r\n\r\n    const activateEditMode = () => {  // обработчик при нажатии на статус\r\n        setEditMode(true); // react возьмет объект  state изменив те свойства, которые переназначены(editMode)\r\n    }\r\n\r\n    const deactivateEditMode = () => {   // закончил редактирование\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n    const onStatusChange = (e) => {       // e -onChange. При каждом напечатывании символа меняем локальный status\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || 'Статус'}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\r\n                        value={status} />\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus}) => {\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large} />\r\n                <div>{profile.fullName}</div>\r\n                <div>{profile.aboutMe}</div>\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileInfo;\r\n","import React from 'react';\r\nimport s from './Post.module.css'\r\n\r\nconst Post = (props) => {\r\n    return <div className={s.item}>\r\n        <img src='https://avatars.mds.yandex.net/get-pdb/27625/2a8a2fab-686b-48da-8450-d5cac2debe12/s1200?webp=false' />\r\n        {props.message}\r\n        <div>\r\n            <span>like</span> {props.likeCount}\r\n        </div>\r\n    </div>\r\n}\r\nexport default Post;","import React, { Component } from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Posts/Post';\r\nimport { reduxForm, Field } from 'redux-form';\r\nimport { maxLengthCreator, required } from '../../../utils/validators/validators';\r\nimport { Textarea } from '../../common/FormsControls/FormsControls';\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nlet AddNewPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name='newPostText' component={Textarea} placeholder={'Post message'}\r\n                    validate={[required, maxLength10]} />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nlet AddNewPostFormRedux = reduxForm({ form: 'PostAddNewPostForm' })(AddNewPostForm);\r\n\r\nconst MyPosts = React.memo (props => {   // проверка пропсов и стейта в функциональном компоненте\r\n\r\n    /*    shouldComponentUpdate(nextProps, nextState){        //должен ли компонент обновится?\r\n           return nextProps != this.props || nextState != this.state;                \r\n          //если новые пропсы или новый стейт не равны текущим\r\n          //только для классовых компонентов\r\n       }  */\r\n    let postsElements =\r\n        [...props.posts]\r\n        .reverse()\r\n        .map(p => <Post message={p.message} likeCount={p.likeCount} />);\r\n\r\n    let newPostElement = React.createRef();   // cоздание ссылки\r\n\r\n    let onAddPost = (values) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n    <div className={s.postsBlock}>\r\n        <h3> My posts</h3>\r\n        <AddNewPostFormRedux onSubmit={onAddPost} />\r\n        <div className={s.posts}>\r\n            {postsElements}\r\n        </div>\r\n    </div>\r\n    )\r\n});\r\n\r\nexport default MyPosts;\r\n","import React from 'react';\r\nimport { addPostActionCreator } from '../../../redux/profile-reducer';\r\nimport MyPosts from './MyPosts';\r\nimport { connect } from 'react-redux';\r\n\r\nlet mapStateToProps =  (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps) (MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n","import React from 'react';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        < div >\r\n            <ProfileInfo profile = {props.profile} status = {props.status} updateStatus = {props.updateStatus} />\r\n            <MyPostsContainer />\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport Profile from './Profile';\r\nimport { connect } from 'react-redux';\r\nimport { getUserProfile, getStatus, updateStatus } from '../../redux/profile-reducer';\r\nimport { withRouter, Redirect } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\n\r\nclass ProfileContainer extends React.Component {        // компонент для запроса на сервак \r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;   // получаем userID из API\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push('./login');\r\n            }\r\n        } // если userId нет загрузить свой профайл\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n    render() {\r\n       // console.log(\"RENDER PROFILE\");\r\n        return (\r\n            < Profile {...this.props}\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateStatus={this.props.updateStatus} /> // презентационный компонент\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {      // круглые скобки, чтобы ф-я вернула объект, не воспринималась как тело ф-ии\r\n    //console.log(\"mapStateToProps PROFILE\")\r\n    return({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n    })\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, { getUserProfile, getStatus, updateStatus }),\r\n    withRouter,\r\n)(ProfileContainer);\r\n\r\n\r\n/*\r\nlet AuthRedirectComponent = withAuthRedirect(ProfileContainer);  // в hoc передаем целевой компонент и создает новый\r\nlet WithUrlDataContainerComponent = withRouter(AuthRedirectComponent) // получение данных из URL\r\n\r\nexport default connect(mapStateToProps, { getUserProfile })(WithUrlDataContainerComponent);   // запрос к store и получение колбеков с пропсами */"],"sourceRoot":""}