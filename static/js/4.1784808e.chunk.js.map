{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/AddMessageForm/AddMessageForm.jsx","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","path","id","className","s","dialog","active","to","name","Message","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","key","messagesElements","messages","m","newMessageBody","isAuth","dialogsItems","velues","sendMessage","mapStateToPropsForRedirect","auth","withAuthRedirect","Component","RedirectComponent","this","React","connect","compose","dispatch","sendMessageCreator"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,+FCWnKC,EARI,SAACC,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OAAO,yBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,QACtC,kBAAC,IAAD,CAASC,GAAIN,GAAOD,EAAMQ,QCDnBC,EAJC,SAACT,GACb,OAAO,yBAAKG,UAAWC,IAAEC,QAASL,EAAMU,U,yCCCtCC,EAAcC,YAAiB,IAkBtBC,cAAW,CAACC,KAAM,2BAAlBD,EAhBQ,SAACb,GACpB,OACI,0BAAMe,SAAUf,EAAMgB,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IAEdC,SAAa,CAACC,IAASV,GACvBH,KAAK,iBAAiBc,YAAY,wBAE1C,6BACI,6CCmBDC,EA1BC,SAACvB,GAEb,IAAIwB,EAAQxB,EAAMyB,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAYrB,KAAMqB,EAAErB,KAAMsB,IAAKD,EAAE3B,GAAIA,GAAI2B,EAAE3B,QACpF6B,EAAmBP,EAAMQ,SAASJ,KAAI,SAAAK,GAAC,OAAI,kBAAC,EAAD,CAASvB,QAASuB,EAAEvB,QAASoB,IAAKG,EAAE/B,QAC9DsB,EAAMU,eAM3B,OAAKlC,EAAMmC,OAGP,yBAAKhC,UAAWC,IAAEuB,SACd,yBAAKxB,UAAWC,IAAEgC,cACbV,GAEL,yBAAKvB,UAAWC,IAAE4B,UACd,iCAAOD,EAAP,MAEJ,kBAAC,EAAD,CAAgBhB,SAdJ,SAACsB,GACjBrC,EAAMsC,YAAYD,EAAOH,oBAGH,kBAAC,IAAD,CAAU3B,GAAG,Y,wCClBvCgC,EAA6B,SAACf,GAAD,MAAY,CACzCW,OAAQX,EAAMgB,KAAKL,SAcRM,EAXQ,SAACC,GAAe,IAC7BC,EAD4B,uKAG1B,OAAKC,KAAK5C,MAAMmC,OACT,kBAACO,EAAcE,KAAK5C,OADI,kBAAC,IAAD,CAAUO,GAAG,eAHlB,GACFsC,IAAMH,WAOtC,OADqCI,YAAQP,EAARO,CAAoCH,I,OCW9DI,sBACXD,aApBkB,SAACtB,GACnB,MAAM,CACFC,YAAaD,EAAMC,gBAIF,SAACuB,GACtB,MAAM,CACFV,YAAa,SAACJ,GACVc,EAASC,YAAmBf,SAYpCO,EAFWM,CAGTxB","file":"static/js/4.1784808e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__pCgoX\",\"dialogsItems\":\"Dialogs_dialogsItems__1K_dG\",\"active\":\"Dialogs_active__be9qb\",\"messages\":\"Dialogs_messages__1VQE_\",\"message\":\"Dialogs_message__3jccM\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst DialogItem = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return <div className={s.dialog + ' ' + s.active}>\r\n        <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\nconst Message = (props) => {\r\n    return <div className={s.dialog}>{props.message}</div>\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { Textarea } from '../../common/FormsControls/FormsControls';\r\nimport { required, maxLengthCreator } from '../../../utils/validators/validators';\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit} >\r\n            <div>\r\n                <Field component={Textarea}\r\n                   // массив валидаторов, максимальная длина\r\n                    validate = { [required,maxLength50 ]}\r\n                    name='newMessageBody' placeholder='Enter your message' />\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm ({form: 'dialog-add-message-form'})(AddMessageForm);","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { Textarea } from '../common/FormsControls/FormsControls';\r\nimport {required, maxLengthCreator} from '../../utils/validators/validators';\r\nimport AddMessageForm from './AddMessageForm/AddMessageForm';\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.dialogsPage;   //передача в пропсах stor\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id} />);\r\n    let messagesElements = state.messages.map(m => <Message message={m.message} key={m.id} />);\r\n    let newMessageBody = state.newMessageBody;\r\n\r\n    let addNewMessage = (velues) => {\r\n        props.sendMessage(velues.newMessageBody);\r\n    }\r\n\r\n    if (!props.isAuth) return <Redirect to='/login' />; // перенаправление на логин если не залогинен\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div> {messagesElements} </div>\r\n            </div>\r\n            <AddMessageForm onSubmit={addNewMessage} />\r\n        </div>\r\n    )\r\n}\r\nexport default Dialogs;","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({      // \r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nlet withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to='/login' /> // перенаправление на логин если не залогинен\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent;\r\n}\r\n\r\nexport default withAuthRedirect;","import React from 'react';\r\nimport { sendMessageCreator } from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\nimport { connect } from 'react-redux';\r\nimport withAuthRedirect from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\nlet mapStateToProps = (state) => {     //превратить часть state в props\r\n    return{\r\n        dialogsPage: state.dialogsPage, //получение объекта данных из state, c помощью библиотеки react-redux\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {   // передача collback в презинтационный компонент\r\n    return{\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody));\r\n         }  // получаем coolback \r\n    }\r\n}\r\n\r\n/* let AuthRedirectComponent = withAuthRedirect(Dialogs);  // в hoc передаем целевой компонент и создает новый\r\n\r\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps) (AuthRedirectComponent); // conect возвращает контейнерный компонент, отрисовывается --\r\n// -- презинтационный компонет Dialogs в него приходят из пропсов данные из объектов, которые возвращаются функциями  */\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n    )(Dialogs);  // compose вызовет withAuthRedirect и передасть Dialogs в него, результат пойдет в connect;"],"sourceRoot":""}