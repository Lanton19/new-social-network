{"version":3,"sources":["components/Navbar/Navbar.module.css","redux/dialogs-reducer.js","components/Users/users.module.css","assets/images/user.png","assets/images/35.gif","api/api.js","serviceWorker.js","components/Header/Header.jsx","redux/auth-reducer.js","components/Header/HeaderContainer.jsx","components/Navbar/Navbar.jsx","utils/object-helpers.js","redux/users-reducer.js","components/common/Paginator/Paginator.jsx","components/Users/User.jsx","components/Users/Users.jsx","redux/users-selectors.js","components/Users/UsersContainer.jsx","components/Login/Login.jsx","redux/app-reducer.js","redux/sidebar-reducer.js","redux/redux-store.js","hoc/withSuspense.js","App.js","index.js","components/common/FormsControls/FormsControls.js","components/common/Preloader/Preloader.js","components/common/FormsControls/FormsControls.module.css","components/common/Paginator/Paginator.module.css","utils/validators/validators.js","components/Header/Header.module.css","redux/profile-reducer.js"],"names":["module","exports","initialState","dialogs","id","name","messages","message","sendMessageCreator","newMessageBody","type","dialogsReducer","state","action","body","instance","axios","create","withCredentials","baseURL","headers","usersAPI","requestUsers","page","pageSize","get","then","response","data","follow","userId","post","unfollow","delete","getProfile","console","warn","profileAPI","getStatus","updateStatus","status","put","authAPI","me","login","email","password","rememberMe","logout","Boolean","window","location","hostname","match","Header","props","className","s","header","src","loginBlock","isAuth","onClick","to","SET_USER_DATA","setAuthUserData","payload","getAuthUserData","dispatch","a","resultCode","authReducer","HeaderContainer","this","React","Component","connect","auth","Navbar","nav","item","activeClassName","activeLink","active","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","users","totalUsersCount","isFetching","followingInProgress","followSuccess","unfollowSuccess","setCurrentPage","toggleIsFetching","toggleFollowingProgress","userID","followUnfollowFlow","apiMethod","actionCreator","usersReducer","followed","count","filter","Paginator","totalItemsCount","currentPage","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","styles","paginator","p","cn","selectedPage","pageNumber","key","e","User","user","photos","small","userPhoto","disabled","some","Users","getUsers","createSelector","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","Preloader","compose","bind","totalCount","LoginReduxForm","reduxForm","form","handleSubmit","error","onSubmit","createField","required","Input","style","formSummaryError","length","stopSubmit","_error","formData","initialized","appReducer","sidebarReducer","reducers","combineReducers","profilePage","profileReducer","dialogsPage","sidebar","formReducer","app","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","__store__","withSuspense","Suspense","fallback","DialogsContainer","lazy","ProfileContainer","App","initializApp","path","render","AppContainer","withRouter","promise","Promise","all","SamuraiJSApp","basename","process","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","FormControl","input","meta","touched","children","hasError","formControl","Textarea","restPprops","child","placeholder","validators","component","text","validate","backgroundColor","preloader","value","maxLengthCreator","maxLength","posts","likeCount","profile","addPostActionCreator","newPostText","setStatus","getUserProfile","newPost","likesCount","postId"],"mappings":"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","file":"static/js/main.5d201874.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3o14q\",\"item\":\"Navbar_item__3NGOt\",\"activeLink\":\"Navbar_activeLink__2t2sj\"};","const SEND_MESSAGE = 'SEND-MESSAGE';\r\n\r\nlet initialState = {                             //первоначальная инициализация\r\n    dialogs: [\r\n        { id: 1, name: \"Antony\" },\r\n        { id: 2, name: \"Vera\" },\r\n        { id: 3, name: \"Sasha\" },\r\n        { id: 4, name: \"Victor\" },\r\n        { id: 5, name: \"Anna\" },\r\n        { id: 6, name: \"Valera\" }\r\n    ],\r\n    messages: [\r\n        { id: 1, message: \"Hi\" },\r\n        { id: 2, message: \"How is your APP\" },\r\n        { id: 3, message: \"Yo\" },\r\n        { id: 4, message: \"Yo\" },\r\n        { id: 5, message: \"Yo\" }\r\n    ]\r\n};\r\n\r\nconst dialogsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SEND_MESSAGE:\r\n            let body = action.newMessageBody; // достаем текущий текст\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, { id: 6, message: body }]  // копируем массив и добавляем элемент в конец массива\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//создатели action (действий)\r\n\r\nexport const sendMessageCreator = (newMessageBody) => ({ type: SEND_MESSAGE, newMessageBody })\r\n\r\nexport default dialogsReducer;                                 ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__DADPV\"};","module.exports = __webpack_public_path__ + \"static/media/user.be5a03db.png\";","module.exports = __webpack_public_path__ + \"static/media/35.4836b4a8.gif\";","import axios from \"axios\";\r\n\r\n// общие настройки\r\nexport const instance = axios.create({      \r\n    withCredentials: true,   // объект настроек\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`, // базовый url, будет приклеиватся к строке\r\n    headers: {//заголовки\r\n        'API-KEY': '95c27e8c-de5f-4834-bf09-c3f27c5f7a82' // ключ для работы с API\r\n    }\r\n});\r\n\r\nexport const usersAPI = {\r\n    requestUsers(page = 1, pageSize = 10) {\r\n        return instance.get(`users?page=${page}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data;   // промис для получения только data, без лишней информации в ответе от сервера\r\n            });\r\n    },\r\n\r\n    follow(userId) {\r\n        return instance.post(`follow/${userId}`)\r\n    },\r\n\r\n    unfollow(userId) {\r\n        return instance.delete(`follow/${userId}`)\r\n    },\r\n    getProfile(userId) {\r\n        console.warn('Obsolete method. Please profileAPI object. ')\r\n        return profileAPI.getProfile(userId) // делегирование метода, чтобы не переписывать везде  \r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId) {\r\n        return instance.get(`profile/` + userId);  // переход к юзеру    \r\n    },\r\n    getStatus(userId) {\r\n        return instance.get(`profile/status/` + userId);   // получить статус\r\n    },\r\n    updateStatus(status) {\r\n        return instance.put(`profile/status`, {status: status}); // изменение статуса\r\n    }\r\n}\r\n\r\nexport const authAPI = {                        \r\n    me () {\r\n        return instance.get(`auth/me`);   // промис аутентификация\r\n    },\r\n    login (email, password, rememberMe=false) {\r\n        return instance.post(`auth/login`, {email, password, rememberMe});  \r\n    },\r\n    logout () {\r\n        return instance.delete(`auth/login`); \r\n    }\r\n\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport s from './Header.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Header = (props) => {\r\n    return <header className={s.header}>\r\n        <img src='https://img.favpng.com/17/14/18/logo-science-clip-art-png-favpng-u8mYYKbb2nfTPUbvuq8Hdcgph.jpg' />\r\n        \r\n        <div className={s.loginBlock}>\r\n            { props.isAuth \r\n            ? <div>{props.login} - <button onClick={props.logout}>Log out</button> </div> \r\n             : <NavLink to={\"/login\"}>Login</NavLink>}\r\n        </div>         \r\n    </header>\r\n}   \r\nexport default Header;\r\n","import { authAPI } from \"../api/api\";\r\nimport { stopSubmit } from \"redux-form\";\r\n\r\nconst SET_USER_DATA = 'samurai-network/auth/SET_USER_DATA'; // установить пользовательские данные \r\n\r\nlet initialState = {                       //первоначальная инициализация\r\n    userId: null,                           // id юзера\r\n    email: null,\r\n    login: null,\r\n    isAuth: false                        // залогинены или нет                                    \r\n};\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload // свойство payload с userId, email, login\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\r\n    type: SET_USER_DATA, payload:\r\n        { userId, email, login, isAuth }\r\n})\r\n\r\nexport const getAuthUserData = () => async (dispatch) => { // получить аутентификационные пользовательские данные (санк криэйтор)\r\n    let response = await authAPI.me();\r\n\r\n    if (response.data.resultCode === 0) {      // если залогинены вернуть данные\r\n        let { id, email, login } = response.data.data; // 1data - структура axios, 2data - из API \r\n        dispatch(setAuthUserData(id, email, login, true)); // данные в reducer\r\n    }\r\n}\r\n\r\nexport const login = (email, password, rememberMe) => async (dispatch) => { // логинемся (санк криэйтор - ф-я возвращающая санку)\r\n\r\n    let response = await authAPI.login(email, password, rememberMe);\r\n    if (response.data.resultCode === 0) {      // если залогинены вернуть данные\r\n        dispatch(getAuthUserData())\r\n    }\r\n    else {\r\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : 'Some error';\r\n        dispatch(stopSubmit('login', { _error: message }));\r\n    }\r\n}\r\n\r\nexport const logout = () => async (dispatch) => {\r\n    let response = await authAPI.logout();\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(null, null, null, false))\r\n    }\r\n}\r\nexport default authReducer;","import React from 'react';\r\nimport Header from './Header';\r\nimport { connect } from 'react-redux';\r\nimport { logout } from '../../redux/auth-reducer';\r\n\r\nclass HeaderContainer extends React.Component {   //контейнерный компонент для запроса на сервер\r\n\r\n    render() {\r\n        return <Header {...this.props} />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n});\r\n\r\nexport default connect(mapStateToProps, {logout })(HeaderContainer); // контейнерный компонент, который возвращает функция connect\r\n","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n// NavLink - смена url без перезагрузки страницы\r\nconst Navbar = () => {\r\n    return <nav className={s.nav}>\r\n        <div className = {s.item}>\r\n            <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>   \r\n        </div>\r\n        <div className ={`${s.item} ${s.active}`}>\r\n            <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n        </div>\r\n        <div className = {s.item}>\r\n            <NavLink to='/users' activeClassName={s.activeLink}>Users</NavLink>\r\n        </div>\r\n        <div className = {s.item}>\r\n            <NavLink to='/news' activeClassName={s.activeLink}>News</NavLink>\r\n        </div>\r\n        <div className = {s.item}>\r\n            <NavLink to='/music' activeClassName={s.activeLink}>Music</NavLink>\r\n        </div>\r\n        <div className = {s.item}>\r\n            <NavLink to='/settings' activeClassName={s.activeLink}>Settings</NavLink>\r\n        </div>\r\n    </nav>\r\n}   \r\n\r\nexport default Navbar;\r\n","//функция изменить объект в массив\r\nexport const updateObjectInArray = (items, itemId, objPropName, newObjProps) => {\r\n   return items.map(u => {               // вернет новый массив в котором заменит,\r\n    if (u[objPropName] === itemId) {     // если найдет совпадения по objPropName c itemId\r\n        return { ...u, ...newObjProps}   // создав копию объекта измененного и заменит старые свойства новыми\r\n    }\r\n    return u;                     \r\n})\r\n}","import { usersAPI } from \"../api/api\";\r\nimport { updateObjectInArray } from \"../utils/object-helpers\";\r\n\r\nconst FOLLOW = 'FOLLOW'; // подписан \r\nconst UNFOLLOW = 'UNFOLLOW';  //не подписан\r\nconst SET_USERS = 'SET_USERS';   // установка пользователей в state\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'; // установить текущую страницу\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT'; // установить общее количество пользователей\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'; // переключи значение получения данных\r\nconst TOGGLE_IS_FOLLOWONG_PROGRESS = 'TOGGLE_IS_FOLLOWONG_PROGRESS'; // переключение процесса подписки\r\n\r\nlet initialState = {                       //первоначальная инициализация\r\n    users: [],                             // массив пользователей\r\n    pageSize: 10,                           // пользователей на странице(размер страницы)\r\n    totalUsersCount: 0,                    // общее количество пользователей\r\n    page: 1,                        // текущая страница\r\n    isFetching: true,                      // получаем данные от сервера?\r\n    followingInProgress: []             // загрузка от повторного нажатия на подписку\r\n};\r\n\r\nconst usersReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true} )\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false} )\r\n            }\r\n        case SET_USERS: {\r\n            return { ...state, users: action.users }   //перезатираем user-ов, теми что пришли из action\r\n        }\r\n        // делаем копию стейта и подменяем свойство в этой копии\r\n        case SET_CURRENT_PAGE: {\r\n            return { ...state, page: action.page } // устанавливаем текущую страницу\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return { ...state, totalUsersCount: action.count } // установить общее количество пользователей\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return { ...state, isFetching: action.isFetching } // переключатель данных(приходят не приходят)\r\n        }\r\n        case TOGGLE_IS_FOLLOWONG_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n                // фильтрация id не равна id из actin\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n//создатели action (действий)\r\nexport const followSuccess = (userId) => ({ type: FOLLOW, userId })\r\n\r\nexport const unfollowSuccess = (userId) => ({ type: UNFOLLOW, userId })\r\n\r\nexport const setUsers = (users) => ({ type: SET_USERS, users })\r\n\r\nexport const setCurrentPage = (page) => ({ type: SET_CURRENT_PAGE, page })\r\n\r\nexport const setTotalUsersCount = (totalUsersCount) => ({ type: SET_TOTAL_USERS_COUNT, count: totalUsersCount })\r\n\r\nexport const toggleIsFetching = (isFetching) => ({ type: TOGGLE_IS_FETCHING, isFetching })\r\n\r\nexport const toggleFollowingProgress = (isFetching, userID) => ({ type: TOGGLE_IS_FOLLOWONG_PROGRESS, isFetching, userID })\r\n\r\nexport const requestUsers = (page, pageSize) => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleIsFetching(true));  // активация крутилки\r\n        dispatch(setCurrentPage(page));\r\n\r\n        let data = await usersAPI.requestUsers(page, pageSize); // когда придет ответ от сервера, получаем data   \r\n        dispatch(toggleIsFetching(false));\r\n        dispatch(setUsers(data.items));                // устанавливаем пользователей из response\r\n        dispatch(setTotalUsersCount(data.totalCount));\r\n    }\r\n}\r\n\r\nconst followUnfollowFlow = async (dispatch, userId, apiMethod, actionCreator) => {\r\n    dispatch(toggleFollowingProgress(true, userId));  // переключение процесса подписки перед запросом\r\n    let response = await apiMethod(userId);  // когда придет ответ от сервера                  \r\n    if (response.data.resultCode == 0) { //если нет ошибок(подтверждение от сервера что подписка произошла)   \r\n        dispatch(actionCreator(userId));              // вызвать collback \r\n    }\r\n    dispatch(toggleFollowingProgress(false, userId));  // переключение процесса подписки после запроса\r\n}\r\nexport const follow = (userId) => {\r\n    return async (dispatch) => {\r\n        followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), followSuccess);\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId) => {\r\n    return async (dispatch) => {\r\n        followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), unfollowSuccess);\r\n    }\r\n}\r\n\r\nexport default usersReducer;","import React, { useState } from 'react';\r\nimport styles from './Paginator.module.css';\r\nimport cn from \"classnames\";\r\n\r\nlet Paginator = ({ totalItemsCount, pageSize, currentPage, onPageChanged, portionSize = 10 }) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);   // подсчет страниц, округление в большую сторону\r\n\r\n    let pages = [];                                             // создаем пустой массив\r\n    for (let i = 1; i <= pagesCount; i++) {                          // пробегаем фором \r\n        pages.push(i);                                          // добавляем\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize); // подсчет порции (подсчет всех страниц / размер порции)\r\n    let [portionNumber, setPortionNumber] = useState(1);    // в локальном state храним portionNumber\r\n    // и ф-ю setPortionNumber, которая изменияет portionNumber.   хук useState.\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1; // номер страницы левой граници порции\r\n    let rightPortionPageNumber = portionNumber * portionSize;          // номер страницы правой граници порции\r\n\r\n    return <div className={styles.paginator}>\r\n        {portionNumber > 1 &&                     // показывай кнопку в лево, если текущая порция > 1 \r\n            //при клике на кнопку установить порция текущая - 1 \r\n            <button onClick={() => { setPortionNumber(portionNumber - 1) }}>PREV</button>}\r\n\r\n        {pages\r\n            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber) // страницы >= левой границы и <= правой\r\n            .map((p) => {                                  // p - pages\r\n                return <span className={ cn({\r\n                    [styles.selectedPage]: currentPage === p\r\n                }, styles.pageNumber)}\r\n                    key={p}\r\n                    // если текущая страница равна запушенной p - применить стиль \r\n                    onClick={(e) => {\r\n                        onPageChanged(p);\r\n                    }}>{p}</span>\r\n                // при клике  \r\n            })}\r\n        {portionCount > portionNumber &&          // показывай кнопку в право, если количество порций больше текущая порция\r\n            //при клике на кнопку установить порция текущая + 1\r\n            <button onClick={() => { setPortionNumber(portionNumber + 1) }}>NEXT</button>}\r\n\r\n    </div>\r\n}\r\n\r\nexport default Paginator; ","import React from 'react';\r\nimport styles from './users.module.css';\r\nimport userPhoto from '../../assets/images/user.png';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nlet User = ({ user, followingInProgress, unfollow, follow }) => {\r\n    return (\r\n        <div>\r\n            <span>\r\n                <div>\r\n                    <NavLink to={'/profile/' + user.id}>  {/* куда ведёт */}\r\n                        <img src={user.photos.small != null ? user.photos.small : userPhoto}\r\n                            // если фото не равен null отоброзить, иначе отобразить фото по умолчанию\r\n                            className={styles.userPhoto} />\r\n                    </NavLink>\r\n                </div>\r\n                <div>\r\n                    {user.followed      // если подписаны\r\n                        // при клике на мышь отработает колбэк и возьмет в пропсах unfollow и передаст id\r\n                        ? <button disabled={followingInProgress.some(id => id === user.id)}\r\n                            onClick={() => { unfollow(user.id) }}>\r\n                            Unfollow</button>\r\n                        : <button disabled={followingInProgress.some(id => id === user.id)}\r\n                            onClick={() => { follow(user.id) }}>\r\n                            Follow</button>}\r\n                </div>\r\n            </span>\r\n            <span>\r\n                <span>\r\n                    <div>{user.name}</div>\r\n                    <div>{user.status}</div>\r\n                </span>\r\n                <span>\r\n                    <div>{'user.location.country'}</div>\r\n                    <div>{'user.location.city'}</div>\r\n                </span>\r\n            </span>\r\n        </div>)\r\n}\r\nexport default User; ","import React from 'react';\r\nimport Paginator from '../common/Paginator/Paginator';\r\nimport User from './User';\r\n\r\nlet Users = ({ currentPage, totalItemsCount, pageSize, onPageChanged, users, ...props }) => {\r\n    return <div>\r\n        <Paginator currentPage={currentPage} onPageChanged={onPageChanged}\r\n            totalItemsCount={totalItemsCount} pageSize={pageSize} />\r\n        <div>\r\n            {\r\n                users.map(u => <User user={u}\r\n                    followingInProgress={props.followingInProgress}\r\n                    key={u.id}\r\n                    unfollow={props.unfollow}\r\n                    follow={props.follow}\r\n                />)\r\n            }\r\n        </div>\r\n    </div>\r\n}\r\nexport default Users; ","import { createSelector } from \"reselect\";\r\n\r\nconst getUsersSelector = (state) => {\r\n    return state.usersPage.users;\r\n}\r\n\r\nexport const getUsers = createSelector(getUsersSelector, (users) => {\r\n    return users.filter( u=>true );\r\n})\r\n\r\nexport const getPageSize = (state) => {\r\n    return state.usersPage.pageSize;\r\n}\r\n\r\nexport const getTotalUsersCount = (state) => {\r\n    return state.usersPage.totalUsersCount;\r\n}\r\n\r\nexport const getCurrentPage = (state) => {\r\n    return state.usersPage.page;\r\n}\r\n\r\nexport const getIsFetching = (state) => {\r\n    return state.usersPage.isFetching;\r\n}\r\n\r\nexport const getFollowingInProgress = (state) => {\r\n    return state.usersPage.followingInProgress;\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    follow,\r\n    setCurrentPage,\r\n    unfollow, toggleFollowingProgress, requestUsers\r\n} from '../../redux/users-reducer';\r\nimport Users from './Users';\r\nimport Preloader from '../common/Preloader/Preloader';\r\n//import withAuthRedirect from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers\r\n} from '../../redux/users-selectors';\r\n\r\nclass UsersContainer extends React.Component {    // extends - наследование свойств React.Component\r\n    componentDidMount() {\r\n        let { currentPage, pageSize } = this.props;\r\n        this.props.getUsers(currentPage, pageSize);\r\n    }\r\n\r\n    onPageChanged = (pageNumber) => {\r\n        let { pageSize } = this.props;\r\n        this.props.getUsers(pageNumber, pageSize);\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader /> : null}\r\n            < Users totalItemsCount={this.props.totalItemsCount}\r\n                pageSize={this.props.pageSize}\r\n                currentPage={this.props.currentPage}\r\n                onPageChanged={this.onPageChanged}\r\n                users={this.props.users}\r\n                follow={this.props.follow}\r\n                unfollow={this.props.unfollow}\r\n                followingInProgress={this.props.followingInProgress}\r\n            />\r\n        </>\r\n    } // если сейчас получаем данные, то отобразим прелоадер либо ничего\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalItemsCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    //withAuthRedirect,\r\n    connect(mapStateToProps, { follow, unfollow, setCurrentPage, toggleFollowingProgress, getUsers: requestUsers })\r\n)(UsersContainer)","import React from 'react';\r\nimport { reduxForm, Field } from 'redux-form';\r\nimport { Input, createField } from '../common/FormsControls/FormsControls';\r\nimport { required } from '../../utils/validators/validators';\r\nimport { connect } from 'react-redux';\r\nimport { login } from '../../redux/auth-reducer';\r\nimport { Redirect } from 'react-router-dom';\r\nimport style from './../common/FormsControls/FormsControls.module.css';\r\n\r\nconst LoginForm = ({handleSubmit, error}) => {\r\n        return (\r\n                <form onSubmit={handleSubmit} >\r\n                        {createField('Email', 'email', [required], Input)}\r\n                        {createField('Password', 'password', [required], Input, { type: 'password' })}\r\n                        {createField(null, 'rememberMe', [], Input, { type: 'checkbox' }, \"rememder me\")}\r\n\r\n                        {error && <div className={style.formSummaryError}>\r\n                                {error}\r\n                        </div>\r\n                        }\r\n                        <div>\r\n                                <button>Login</button>\r\n                        </div>\r\n                </form>\r\n        )\r\n}\r\n// handleSubmit - убирает значения по умолчанию, \r\n// сбор всех данных и упаковка в объект,\r\n// контейнерный компонент(созданный вокруг input) вызывает onSubmit и передает в него объект с данными\r\n\r\nconst LoginReduxForm = reduxForm({ form: 'login' })(LoginForm)   // уникальное название для формы\r\n\r\nconst Login = (props) => {\r\n        const onSubmit = (formData) => {\r\n                props.login(formData.email, formData.password, formData.rememberMe);\r\n        }\r\n\r\n        if (props.isAuth) {\r\n                return <Redirect to={'/profile'} />\r\n        }\r\n\r\n        return <div>\r\n                <h1>Login</h1>\r\n                <LoginReduxForm onSubmit={onSubmit} />\r\n        </div>\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n        isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, { login })(Login);","import { getAuthUserData } from \"./auth-reducer\";\r\n\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS'; // инициализация прошла успешно\r\n\r\nlet initialState = {                       //первоначальная инициализация\r\n    initialized: false,                                                          \r\n};\r\n\r\nconst appReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const initializedSucces = () => ({ type: INITIALIZED_SUCCESS })\r\n\r\nexport const initializApp = () => (dispatch) => { \r\n    let promise = dispatch(getAuthUserData());\r\n\r\n    Promise.all ([promise])\r\n        .then(() => {\r\n        dispatch(initializedSucces());\r\n    });\r\n}\r\n\r\nexport default appReducer;","let initialState = {};\r\nconst sidebarReducer = (state = initialState, action) =>{\r\n\r\n    return state;\r\n}  \r\nexport default sidebarReducer;                                    ","import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\"; \r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { reducer as formReducer } from 'redux-form'; \r\nimport appReducer from \"./app-reducer\";\r\n\r\nlet reducers = combineReducers({           // объединение редюсеров создание объекта со свойствами\r\n    profilePage: profileReducer,        // свойство profileReduser со значением profileReduser\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,                   // form название в глобальном state\r\n    app: appReducer\r\n}); \r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n//let store = createStore(reducers, applyMiddleware (thunkMiddleware)); // создание store и передача \r\n//закомбайнерных reducer. applyMiddleware - принять промежуточные слои для санок \r\n\r\nwindow.__store__ = store;   // сохранить store глобально. в объект window\r\n\r\nexport default store;","import React from 'react';\r\nimport Preloader from '../components/common/Preloader/Preloader';\r\n\r\nexport const withSuspense = (Component) => {\r\n    return (props) => {\r\n        return <React.Suspense fallback={<Preloader />} >\r\n            <Component {...props} />\r\n        </React.Suspense>\r\n    };\r\n}\r\n","import React, { Component, Suspense } from 'react';\r\nimport './App.css';\r\nimport HeaderContainer from './components/Header/HeaderContainer';\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport { Route, withRouter } from \"react-router-dom\";\r\nimport UsersContainer from './components/Users/UsersContainer';\r\nimport Login from './components/Login/Login';\r\nimport { connect, Provider } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { initializApp } from './redux/app-reducer';\r\nimport Preloader from './components/common/Preloader/Preloader';\r\nimport store from './redux/redux-store';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport { withSuspense } from './hoc/withSuspense';\r\n//import DialogsContainer from './components/Dialogs/DialogsContainer';\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer')); // ленивая загрузка\r\n//import ProfileContainer from './components/Profile/ProfileContainer';\r\nconst ProfileContainer = React.lazy(() => import('././components/Profile/ProfileContainer'));\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.initializApp();\r\n  }\r\n\r\n  render() {\r\n    if (!this.props.initialized) {\r\n      return <Preloader />\r\n    }\r\n    return (\r\n      <div className='app-wrapper'>\r\n        <HeaderContainer />\r\n        <Navbar />\r\n        <div className='app-wrapper-content'>\r\n          <Route path='/dialogs'                   // следит за url и загружает coolback который передали\r\n            render={withSuspense(DialogsContainer)} />\r\n\r\n          <Route path='/profile/:userId?'           // в url есть параметр userID\r\n            render={withSuspense(ProfileContainer ) } />\r\n\r\n          <Route path='/users'\r\n            render={() => <UsersContainer />} />\r\n\r\n          <Route path='/login'\r\n            render={() => <Login />} />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  initialized: state.app.initialized\r\n})\r\n\r\nlet AppContainer = compose(\r\n  withRouter,\r\n  connect(mapStateToProps, { initializApp }))(App);\r\n\r\nconst SamuraiJSApp = (props) => {\r\n  return <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n    <Provider store={store}>\r\n      <AppContainer />\r\n    </Provider>\r\n  </BrowserRouter>\r\n}\r\n// Provider из react-redux - передаем store созданный с помощью createStore.\r\n// Provider использует context API для того, чтобы засунуть в context store, чтобы дочерние компоненты могли до него достучаться \r\nexport default SamuraiJSApp;","import * as serviceWorker from './serviceWorker';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport SamuraiJSApp from './App';\r\n\r\n// отрисовка дерева компонент\r\n    ReactDOM.render(<SamuraiJSApp />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from 'react';\r\nimport styles from './FormsControls.module.css';\r\nimport { Field } from 'redux-form';\r\n\r\nconst FormControl = ({ input, meta: { touched, error }, children }) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props) => {\r\n    const { input, meta, child, ...restPprops } = props;\r\n    return <FormControl {...props}><textarea {...input} {...restPprops} /></ FormControl>\r\n    // отрисовываем FormControl и внутрь передаем child\r\n}\r\n\r\nexport const Input = (props) => {\r\n    const { input, meta, child, ...restPprops } = props;\r\n    return <FormControl {...props}><input {...input} {...restPprops} /></FormControl>\r\n}\r\n\r\nexport const createField = (placeholder, name, validators, component, props = {}, text = \"\") => (\r\n    <div>\r\n        <Field placeholder={placeholder} name={name}\r\n            validate={validators}\r\n            component={component}\r\n            {...props}\r\n        /> {text}\r\n    </div>\r\n)","import React from 'react';\r\nimport preloader from '../../../assets/images/35.gif';\r\n\r\nlet Preloader = (props) => {\r\n    return <div style = { {backgroundColor: 'white'} }>\r\n        <img src = {preloader} />\r\n        </div>\r\n}\r\n\r\nexport default Preloader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__xccfr\",\"error\":\"FormsControls_error__2yeap\",\"formSummaryError\":\"FormsControls_formSummaryError__3u7sE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__2ftZ_\",\"pageNumber\":\"Paginator_pageNumber__1tKIL\",\"selectedPage\":\"Paginator_selectedPage__XNuy0\"};","export const required = value => {\r\n    if (value) return undefined;\r\n    return 'Field is required';\r\n}\r\n\r\n//let maxLength;\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n} ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2M62O\",\"loginBlock\":\"Header_loginBlock__2t2oF\"};","import { usersAPI, profileAPI } from \"../api/api\";\r\n\r\nconst ADD_POST = 'ADD-POST'; // константа чтобы не использовать строки, дабы не допустить ошибки в написании(компилятор ругнется при опечатке)\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE'; // получение профайла\r\nconst SET_STATUS = 'SET_STATUS';   // получение статуса\r\nconst DELETE_POST = 'DELETE_POST';   // удаление поста\r\n\r\nlet initialState = {                       //первоначальная инициализация\r\n    posts: [\r\n        { id: 1, message: \"Hi, how are you\", likeCount: 12 },\r\n        { id: 2, message: \"How It's my first post your APP\", likeCount: 32 }\r\n    ],\r\n    profile: null,\r\n    status: \"\"\r\n};\r\n\r\nconst profileReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,                         // копия state\r\n                posts: [...state.posts, newPost], // копируем массив меняем посты, добавляем в конец массива\r\n                newPostText: ''\r\n            };\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return { ...state, profile: action.profile }\r\n        }\r\n        case SET_STATUS: {\r\n            return { ...state, status: action.status }\r\n        }\r\n        case DELETE_POST: {\r\n            return { ...state, post: state.post.filter(p => p.id != action.postId) }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//создатели action (действий)\r\nexport const addPostActionCreator = (newPostText) => ({ type: ADD_POST, newPostText })\r\nexport const setUserProfile = (profile) => ({ type: SET_USER_PROFILE, profile })\r\nexport const setStatus = (status) => ({ type: SET_STATUS, status })\r\nexport const deletePost = (postId) => ({ type: DELETE_POST, postId })\r\n\r\nexport const getUserProfile = (userId) => async (dispatch) => {     // запросить юзерский профайл, санка\r\n    let response = await usersAPI.getProfile(userId);\r\n    dispatch(setUserProfile(response.data));\r\n}\r\nexport const getStatus = (userId) => async (dispatch) => {     // запросить юзерский статус, санка\r\n    let response = await profileAPI.getStatus(userId);\r\n    dispatch(setStatus(response.data));\r\n}\r\nexport const updateStatus = (status) => async (dispatch) => {     // обновить юзерский статус, санка\r\n    let response = await profileAPI.updateStatus(status);\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setStatus(status));\r\n    }\r\n}\r\n\r\nexport default profileReducer;"],"sourceRoot":""}